#!/usr/bin/env python

import os
import sys
import yaml 
import shutil
import filecmp
import subprocess
import argparse

SVN_SERVER = 'https://svn.sinaapp.com/'
LOCAL_CACHE_DIR = os.path.expanduser('~/.saecloud')

VERSION = '0.0.1'
verbose = False

def version(args):
    print "SAE command line v%s" % VERSION

def run(*args):
    # FIXME: Check the return code please
    if verbose:
        print '+', ' '.join(args)
        return subprocess.call(args, close_fds=True)
    else:
        return subprocess.call(args, close_fds=True, stdout=open(os.devnull, 'w'))

def _get_svn_opts(args):
    opts = []
    for opt in ['username', 'password']:
        value = getattr(args, opt)
        if value:
            opts.append('--' + opt)
            opts.append(value)
    return opts

def deploy(args):
    """Deploy local source to server

    Deploy code in source directory to sae server, by default source is current
    directory, version number is set in config.yaml. 

    """
    source = args.dir 
    opts = _get_svn_opts(args)
    cache = LOCAL_CACHE_DIR

    conf_file = os.path.join(source, 'config.yaml')
    try:
        conf =  yaml.load(open(conf_file))
    except:
        print >>sys.stderr, 'Error: Failed to load config.yaml'
        return

    name =  conf['name']
    version = conf['version']

    print 'Deploying http://%s.%s.sinaapp.com' % (version, name)
    print 'Updating cache'
    path = os.path.join(cache, name)
    if not os.path.exists(path):
        url = SVN_SERVER + name
        run('svn', 'checkout', url, path, *opts)
    else:
        run('svn', 'update', path, '-q')

    print 'Finding changes'
    modified = False
    vpath = os.path.join(path, str(version))
    if os.path.exists(vpath):
        q = ['',]
        while len(q):
            part = q.pop(0)
            s = os.path.join(source, part)
            t = os.path.join(vpath, part)
            dc = filecmp.dircmp(s, t, ['.svn'])

            # New files
            for f in dc.left_only:
                if f.startswith('.'): 
                    continue
                d1 = os.path.join(s, f)
                d2 = os.path.join(t, f)
                if os.path.isdir(d1):
                    shutil.copytree(d1, d2)
                else:
                    shutil.copy2(d1, d2)
                run('svn', 'add', d2, '-q')
                modified = True

            # Deleted files
            for f in dc.right_only:
                if f.startswith('.'): 
                    continue
                d = os.path.join(t, f)
                if os.path.isdir(d):
                    shutil.rmtree(d)
                else:
                    os.unlink(d)
                run('svn', 'delete', d, '-q')
                modified = True

            # Modified files
            for f in dc.diff_files:
                if f.startswith('.'): 
                    continue
                d1 = os.path.join(s, f)
                d2 = os.path.join(t, f)
                shutil.copy2(d1, d2)
                modified = True

            subdirs = filter(lambda x: not x.startswith('.'), dc.common_dirs)
            q.extend([os.path.join(part, d) for d in subdirs])
    else:
        # New version
        shutil.copytree(source, vpath, ignore=shutil.ignore_patterns('.*'))
        run('svn', 'add', vpath, '-q')
        modified = True

    if not modified:
        print 'No changes found',
        return 
    print 'Pushing to server... ',
    sys.stdout.flush()
    run('svn', 'commit', path, '-mx')
    print 'done'

def export(args):
    """Export source from sae server

    Export source currently deployed on the sae server to currently directory.
    Version 1 will be used unless you have specified a version number, also, 
    you can specify your svn username and password just as `saecloud depoly`

    """
    url = SVN_SERVER + args.app + '/' + args.version
    print 'Exporting to', args.app
    opts = _get_svn_opts(args)
    run('svn', 'export', url, args.app, *opts)

def main():

    credentials = argparse.ArgumentParser(add_help=False)
    credentials.add_argument('-u', '--username', help='repo username')
    credentials.add_argument('-p', '--password', help='repo password')
    credentials.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='show lowlevel repo operations')

    parser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]))
    parser.set_defaults(verbose=False)
    subparsers = parser.add_subparsers(help='sub commands')

    pe = subparsers.add_parser('export', help='export source code to local directory', parents=[credentials])
    pe.add_argument('app', help='app name')
    pe.add_argument('version', nargs='?', default='1', help='which version to export, default to 1')
    pe.set_defaults(func=export)

    pd = subparsers.add_parser('deploy', help='deploy source directory to SAE', parents=[credentials])
    pd.add_argument('dir', nargs='?', default='.', help='the source code directory to deploy, default to current dir')
    pd.set_defaults(func=deploy)

    pv = subparsers.add_parser('version', help='show version info')
    pv.set_defaults(func=version)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(-1)

    args = parser.parse_args()
    if args.verbose:
        global verbose
        verbose = True
    args.func(args)

if __name__ == '__main__':
    main()
